/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LOWER 1
#define RAISE 2
#define ADJUST 3
#define LOCK 4
#define BACK C_AC_BACK
#define FWD C_AC_FORWARD
#define PAUSE PAUSE_BREAK
#define VOL_DN C_VOL_DN
#define VOL_UP C_VOL_UP
#define LC_SPC LC(SPACE)
#define ZM_IN LC(EQUAL)
#define ZM_OUT LC(MINUS)
#define ZM_RST LC(N0)
#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4
#define HYP LS(LC(LA(LGUI)))

#define HYPER(key) LS(LC(LA(LG(key))))

&mt {
    retro-tap;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_caps {
            timeout-ms = <1000>;
            key-positions = <24 35>;
            bindings = <&caps_word>;
        };
    };

    macros {
        none_blk: none_blk {
            label = "NON_BLOCKING";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LS(COMMA) &kp EQUAL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // key positions
        // --------------------------------------------------------------------------------
        //  |  0  |  1  |  2  |  3  |  4  |  5  |     |  6  |  7  |  8  |  9  |  10 |  11 |
        //  |  12 |  13 |  14 |  15 |  16 |  17 |     |  18 |  19 |  20 |  21 |  22 |  23 |
        //  |  24 |  25 |  26 |  27 |  28 |  29 |     |  30 |  31 |  32 |  33 |  34 |  35 |
        //                    |  36 |  37 |  38 |     |  39 |  40 |  41 |

        default_layer {
            // -----------------------------------------------------------------------------------------
            //  |  TAB       |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  /  | BKSP |
            //  | CTRL / ESC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  P  |  '   |
            //  | SHFT       |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  ;  | SHFT |
            //                           | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
      &kp TAB  &kp Q  &kp W     &kp E  &kp R       &kp T        &kp Y  &kp U      &kp I    &kp O     &kp P   &kp BSPC
&mt LCTRL ESC  &kp A  &kp S     &kp D  &kp F       &kp G        &kp H  &kp J      &kp K    &kp L  &kp SEMI    &kp SQT
    &kp LSHFT  &kp Z  &kp X     &kp C  &kp V       &kp B        &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                             &kp LGUI  &mo 1  &kp RETURN    &kp SPACE  &mo 2   &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            //  |  TAB       |  1    |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            //  | CTRL / ESC |       |     |     |     |     |   | LFT | DWN |  UP | RGT |     |      |
            //  | SHFT       |       |     |     |     |     |   |     |     |     |     |     |      |
            //                             | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
      &kp TAB  &kp N1  &kp N2    &kp N3  &kp N4     &kp N5          &kp N6        &kp N7    &kp N8     &kp N9            &kp N0           &kp BSPC
&mt LCTRL ESC  &trans  &trans    &trans  &trans     &trans        &kp LEFT      &kp DOWN    &kp UP  &kp RIGHT  &kp LA(LG(LEFT))  &kp LA(LG(RIGHT))
    &kp LSHFT  &trans  &trans    &trans  &trans     &trans    &kp LG(LBKT)  &kp LG(RBKT)    &trans     &trans            &trans             &trans
                               &kp LGUI  &trans  &kp SPACE         &kp RET        &trans  &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB       |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL / ESC |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT       |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                          | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
      &kp TAB  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET   &kp AMPS  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR    &kp DEL
&mt LCTRL ESC    &trans  &trans    &trans    &trans  &none_blk    &kp MINUS  &kp EQUAL         &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
    &kp LSHFT    &trans  &trans    &trans    &trans     &trans    &kp UNDER   &kp PLUS         &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
                                 &kp LGUI    &trans  &kp SPACE      &kp RET     &trans         &kp RALT
            >;
        };

        adjust_layer {
            bindings = <
&trans  &bt BT_CLR   &trans   &trans   &trans  &bootloader    &bootloader  &trans  &trans  &trans  &trans  &trans
&trans     &bt BT0  &bt BT1  &bt BT2  &bt BT3      &bt BT4         &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans   &trans   &trans   &trans       &trans      &tog LOCK  &trans  &trans  &trans  &trans  &trans
                              &trans   &trans       &trans        &kp RET  &trans  &trans
            >;
        };

        // The Lower+Raise+Backspace binding toggles a "soft lock" mode that effective disables
        // other keys, allowing the keyboard to be transported without spurious key presses. (Note
        // that the Lower, Raise, and Backspace positions must be bound to &trans to allow the lock
        // layer to be toggled again after it's activated.)
        //
        // If https://github.com/zmkfirmware/zmk/issues/405 is implemented, this layer can be
        // replaced by a native behavior in the future.

        lock_layer {
            bindings = <
&none  &none  &none  &none   &none  &none     &none   &none  &none  &none  &none  &none
&none  &none  &none  &none   &none  &none     &none   &none  &none  &none  &none  &none
&none  &none  &none  &none   &none  &none    &trans   &none  &none  &none  &none  &none
                     &none  &trans  &none     &none  &trans  &none
            >;
        };
    };
};
